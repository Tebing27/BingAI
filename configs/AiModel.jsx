const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };

  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenAiCode=model.startChat({
        generationConfig:CodeGenerationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "Generate to do app: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "```json\n{\n  \"projectTitle\": \"Task Manager App\",\n  \"explanation\": \"This project is a simple task management application built with React and styled with Tailwind CSS. It allows users to add tasks, mark them as complete, and delete them. The application uses the `date-fns` library for formatting dates, `react-chartjs-2` for a chart for showing task status, and `lucide-react` icons for visual elements. The component structure is organized for maintainability, with separate components for the task list, individual tasks, and input forms.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport AddTaskForm from './components/AddTaskForm';\\nimport TaskChart from './components/TaskChart'\\nimport { Clock, Plus, Home } from 'lucide-react';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (task) => {\\n    setTasks([...tasks, task]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task =>\\n      task.id === id ? {...task, completed: !task.completed} : task\\n    ));\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 flex flex-col\\\">\\n     <header className=\\\"bg-indigo-700 text-white p-4 flex justify-between items-center\\\">\\n          <div className=\\\"flex items-center gap-2\\\">\\n          <Home className=\\\"h-6 w-6\\\"/>\\n            <h1 className=\\\"text-2xl font-bold\\\">Task Manager üöÄ</h1>\\n            </div>\\n          <Clock className=\\\"h-6 w-6\\\" />\\n        </header>\\n      <div className=\\\"container mx-auto p-4 flex-grow flex\\\">\\n        <div className='w-1/2 p-4'>\\n            <AddTaskForm addTask={addTask} />\\n            <TaskList tasks={tasks} toggleComplete={toggleComplete} deleteTask={deleteTask} />\\n        </div>\\n        <div className='w-1/2 p-4'>\\n          <TaskChart tasks={tasks} />\\n      </div>\\n      </div>\\n        <footer className=\\\"bg-gray-700 text-white text-center p-4\\\">\\n          <p>Developed with ‚ù§Ô∏è</p>\\n        </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/AddTaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction AddTaskForm({ addTask }) {\\n  const [taskText, setTaskText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (taskText.trim() === '') return;\\n    addTask({\\n      id: Date.now(),\\n      text: taskText,\\n      completed: false,\\n    });\\n    setTaskText('');\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mb-4 flex gap-2\\\">\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"Add a task...\\\" \\n        className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n        value={taskText}\\n        onChange={(e) => setTaskText(e.target.value)}\\n      />\\n      <button type=\\\"submit\\\" className=\\\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n      <Plus className='h-4 w-4'/>\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default AddTaskForm;\\n\"\n    },\n     \"/components/TaskChart.js\": {\n      \"code\": \"import React from 'react';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\\nimport { Pie } from 'react-chartjs-2';\\n\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction TaskChart({ tasks }) {\\n  const completedTasks = tasks.filter(task => task.completed).length;\\n  const pendingTasks = tasks.length - completedTasks;\\n\\n  const data = {\\n    labels: ['Completed', 'Pending'],\\n    datasets: [\\n      {\\n        label: 'Task Status',\\n        data: [completedTasks, pendingTasks],\\n        backgroundColor: [\\n          'rgba(75, 192, 192, 0.2)',\\n          'rgba(255, 99, 132, 0.2)',\\n        ],\\n        borderColor: [\\n          'rgba(75, 192, 192, 1)',\\n          'rgba(255, 99, 132, 1)',\\n        ],\\n        borderWidth: 1,\\n      },\\n    ],\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white shadow rounded p-4\\\">\\n      <h2 className=\\\"text-lg font-semibold mb-4\\\">Task Status</h2>\\n      <Pie data={data} />\\n    </div>\\n  );\\n}\\n\\nexport default TaskChart;\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskItem from './TaskItem';\\n\\nfunction TaskList({ tasks, toggleComplete, deleteTask }) {\\n  return (\\n    <div className=\\\"mt-4 bg-white shadow rounded p-4\\\">\\n      <h2 className=\\\"text-lg font-semibold mb-4\\\">Tasks</h2>\\n      <ul>\\n        {tasks.length === 0 ? <p className='text-gray-500 text-center'>No tasks yet, add some!</p> : tasks.map(task => (\\n          <TaskItem\\n            key={task.id}\\n            task={task}\\n            toggleComplete={toggleComplete}\\n            deleteTask={deleteTask}\\n          />\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\\n\\nexport default TaskList;\\n\"\n    },\n    \"/components/TaskItem.js\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Check } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction TaskItem({ task, toggleComplete, deleteTask }) {\\n  const date = new Date(task.id);\\n  const formattedDate = format(date, 'MMM dd, yyyy hh:mm a');\\n\\n  return (\\n    <li className=\\\"flex items-center justify-between py-2 border-b last:border-b-0\\\">\\n      <div className='flex items-center gap-2'>\\n         <input type=\\\"checkbox\\\" checked={task.completed} onChange={() => toggleComplete(task.id)} className=\\\"mr-2\\\"/>\\n          <span className={`${task.completed ? 'line-through text-gray-500' : 'text-gray-700'}`}>{task.text}</span>\\n      </div>\\n      \\n      <div className='flex items-center gap-2'>\\n        <span className='text-xs text-gray-400'>{formattedDate}</span>\\n        <button onClick={() => deleteTask(task.id)} className=\\\"text-red-500 hover:text-red-700\\\">\\n        <Trash className='h-4 w-4' />\\n        </button>\\n      </div>\\n      \\n    </li>\\n  );\\n}\\n\\nexport default TaskItem;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/AddTaskForm.js\",\n    \"/components/TaskList.js\",\n     \"/components/TaskChart.js\",\n    \"/components/TaskItem.js\"\n  ]\n}\n```\n"},
            ],
          },
        ],
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());